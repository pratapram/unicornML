{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters" : {      
        "HostingBucket" :{
            "Type": "String",
            "Description": " The name for the bucket hosting your website, e.g. 'nlp-yourname'.",                        
            "AllowedPattern": "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
            "Default": "nlp-yourname",
            "ConstraintDescription" : "Should be a Valid S3 Bucket Name"
        },          
        "SourceBucket" :{
            "Type": "String",
            "Description": "Source bucket containing the code deployed by this template.",                        
            "AllowedPattern": "^([a-z]|(\\d(?!\\d{0,2}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})))([a-z\\d]|(\\.(?!(\\.|-)))|(-(?!\\.))){1,61}[a-z\\d\\.]$",
            "Default": "nlp-workshop",
            "ConstraintDescription" : "Should be a Valid S3 Bucket Name"
        },
        "SourceKeyPrefix" :{
            "Type": "String",
            "Description": "Key prefix for website resources in the source bucket.",                        
            "Default": "website-source",
            "ConstraintDescription" : "Should be a Valid S3 Bucket Name"
        }         
    }, 
    "Resources": {       
        "S3CopyRole": {
            "Type": "AWS::IAM::Role",
            "DependsOn": "UnicornFeedbackTable",
            "Properties": {
                "RoleName": "S3CopyRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "S3Access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",                                     
                                        "s3:ListBucket",
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl",
                                        "s3:PutObjectVersionAcl",
                                        "s3:DeleteObject",
                                        "s3:DeleteObjectVersion",
                                        "s3:CopyObject",                                        
                                        "xray:PutTraceSegments"                                        
                                    ],
                                    "Resource": "*"
                                }                                
                            ]
                        }
                    }
                ]
            }
        },
              
        "WebsiteBucket": {
            "Type": "AWS::S3::Bucket",
            "DependsOn": "NLPWorkshopAPIDeployment",            
            "Properties": {
                "BucketName" : {"Ref" : "HostingBucket"},                
                "WebsiteConfiguration": {
                    "IndexDocument": "unicornfeedback.html"
                }     
            }
        },  
        "WebsiteBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",    
            "DependsOn": "WebsiteBucket",             
            "Properties": {
                "Bucket" : {"Ref" : "WebsiteBucket"},                
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "s3:GetObject",
                        "Resource": { "Fn::Sub" : "arn:aws:s3:::${WebsiteBucket}/*" }                    
                    }
                }
            }
        },
        "CopySourceFilesFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "WebsiteBucketPolicy",
            "Properties": {
                "Description" : "Copies objects from a source S3 bucket to a destination",
                "FunctionName" : "CopySourceFilesFunction",
                "Handler": "index.handler",
                "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
                "Code": {
                    "ZipFile" : { "Fn::Join" : ["\n", [
                        "import os",
                        "import json",
                        "import boto3",
                        "import logging",
                        "import cfnresponse",
                        "from botocore.exceptions import ClientError",
                        "s3 = boto3.client('s3')",
                        "logger = logging.getLogger()",
                        "logger.setLevel(logging.INFO)",
                        "def handler(event, context):",
                        "    logger.info('Received event:' + json.dumps(event))",
                        "    source_bucket = event['ResourceProperties']['SourceBucket']",
                        "    source_prefix = event['ResourceProperties'].get('SourceKeyPrefix') or ''",
                        "    bucket = event['ResourceProperties']['Bucket']",
                        "    prefix = event['ResourceProperties'].get('Prefix') or ''",
                        "    result = cfnresponse.SUCCESS",
                        "    try:",
                        "        if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':",
                        "            result = copy_objects(source_bucket, source_prefix, bucket, prefix)",
                        "        elif event['RequestType'] == 'Delete':",
                        "            result = delete_objects(bucket, prefix)",
                        "    except ClientError as e:",
                        "        logger.error('Error: '+e)",
                        "        result = cfnresponse.FAILED",
                        "    cfnresponse.send(event, context, result, {})",
                        "def copy_objects(source_bucket, source_prefix, bucket, prefix):",
                        "    paginator = s3.get_paginator('list_objects_v2')",
                        "    page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)",
                        "    for key in {x['Key'] for page in page_iterator for x in page['Contents']}:",
                        "        dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))",
                        "        if not key.endswith('/'):",
                        "            print('copy {} to {}'.format(key, dest_key))",
                        "            s3.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)",
                        "    return cfnresponse.SUCCESS",
                        "def delete_objects(bucket, prefix):",
                        "    paginator = s3.get_paginator('list_objects_v2')",
                        "    page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)",
                        "    objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]",
                        "    s3.delete_objects(Bucket=bucket, Delete={'Objects': objects})",
                        "    return cfnresponse.SUCCESS"                       
                    ]]}
                },
                "Runtime": "python3.6",
                "Timeout": "30",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "WebsiteContentCustom": {
            "Type": "Custom::S3Objects",
            "DependsOn": "CopySourceFilesFunction",
            "Properties": {
                "ServiceToken": { "Fn::GetAtt" : ["CopySourceFilesFunction", "Arn"] },
                "SourceBucket": {"Ref" : "SourceBucket"},
                "SourceKeyPrefix": {"Ref" : "SourceKeyPrefix"},
                "Bucket": {"Ref" : "HostingBucket"}
            }
        }                
    }    
}